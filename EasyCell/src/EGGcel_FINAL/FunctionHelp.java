/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package EGGcel_FINAL;

/**
 *
 * @author remkoleene
 */
public class FunctionHelp extends javax.swing.JFrame {

    /**
     * Creates new form FunctionHelp
     */
    public FunctionHelp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        FUNC_LIST = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        FUNC_TextPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Function Help");

        FUNC_LIST.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "AVERAGE", "COUNT", "COUNTA", "COUNTIF", "IF", "INT", "ISLOGICAL", "ISEVEN", "ISNUMBER", "MIN", "LOWER", "MAX", "MEDIAN", "MOD", "NOT", "OR", "POWER", "PRODUCT", "PROPER", "ROUNDDOWN", "ROUNDUP", "SIGN ", "SQRT", "SUM", "SUMIF" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        FUNC_LIST.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        FUNC_LIST.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                FUNC_LISTValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(FUNC_LIST);

        jScrollPane2.setViewportView(FUNC_TextPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FUNC_LISTValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_FUNC_LISTValueChanged

    String a = (String) FUNC_LIST.getSelectedValue();
    
    if (a.equals("AVERAGE")){
        FUNC_TextPane.setText("- Is able to take the average of an array of numbers, down to one value / cell.\n" +
"- Skips String inputs. This means that trying to use AVERAGE on an array with strings will result in a 0.\n" +
"- Throws an Exception: Never.");
    } else {
     
    if (a.equals("COUNT")){
        FUNC_TextPane.setText("- Is able to count all numbers in an array of numbers, down to one value / cell.\n" +
"- Skips String inputs. This means that trying to use COUNT on an array with strings will result in a 0.\n" +
"- Throws an Exception: Never.");    
    } else {  
        
     if (a.equals("COUNTA")){
        FUNC_TextPane.setText("- Is able to count all cells that are not empty, down to one value/cell.\n" +
"- Skips empty cells. Backbone wise, these are the cells that contain a “” string.\n" +
"- Throws an Exception: Never");    
    } else {        
        
     if (a.equals("COUNTIF")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the criteria, all following values are in the array in which you will count.\n" +
"- Is able to count all values in an array that meet a certain criteria.\n" +
"- This criteria can be a string, number or a comparison in the form of (for example) “>500”.\n" +
"- The characters ‘>’, ‘<’, ‘>=’ and ‘<=’ are supported.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains less than 2 Objects. Or rather, when there have not been selected enough values / cells.");    
    } else {       
     
     if (a.equals("IF")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the logic statement, second input value is the ‘return if true’-value, third input value is the ‘return if false’-value.\n" +
"- Is able to return two values, depending on whether a cell/statement is true or false.\n" +
"- The logical statement can be a number. The logic statement will be considered true for every number except 0.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList does not contain precisely 3 Objects. Or rather, when there have not been selected 3 cells / values.\n" +
"2.      When the logic statement is not a valid logical statement.");    
    } else {        
        
     if (a.equals("INT")){
        FUNC_TextPane.setText("- Is able to round down or round up a value/cell\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the cell/input is not a number.");    
    } else {        
        
     if (a.equals("ISLOGICAL")){
        FUNC_TextPane.setText("- Is able to see if a cell/value is true or false.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected. ");    
    } else {    
         
     if (a.equals("ISEVEN")){
        FUNC_TextPane.setText("- Is able to see if a cell/value is even\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the cell/input is not a number.");    
    } else {         
         
     if (a.equals("ISNUMBER")){
        FUNC_TextPane.setText("- Is able to see if a cell/value is a number.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.");    
    } else {         
         
     if (a.equals("MIN")){
        FUNC_TextPane.setText("- Is able to return the lowest value in an array of numbers, down to one cell / value.\n" +
"- Skips String inputs. This means that trying to use MIN on an array with strings will result in a 0.\n" +
"- Throws an Exception: never.");    
    } else {         
         
     if (a.equals("LOWER")){
        FUNC_TextPane.setText("- Is able to transform a cell / String input into that same String entirely in lowercase.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the cell/input is not a String.");    
    } else {         
         
     if (a.equals("MAX")){
        FUNC_TextPane.setText("- Is able to return the highest value in an array of numbers, down to one cell / value.\n" +
"- Skips String inputs. This means that trying to use MAX on an array with strings will result in a 0.\n" +
"- Throws an Exception: never.");    
    } else {    
         
        if (a.equals("MEDIAN")){
        FUNC_TextPane.setText("- Is able to found the middle number in an array of numbers. If there is no middle number due to an even amount of numbers in the array, it will result the average between these two middle numbers.\n" +
"-Throws an Exception:\n" +
"1.      When the cell/input is not a number.");    
    } else {         
  
         if (a.equals("MOD")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the base value, second input value is the divisor.\n" +
"- Performs residual division with two values.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 2 Objects. Or rather, when there are more than 2 cells/values selected.\n" +
"2.      When the divisor is 0.\n" +
"3.      When one of the cells/values is not a number.");    
    } else {           
            
         if (a.equals("NOT")){
        FUNC_TextPane.setText("- Is able to process logical statements and their truth value. It will then return the opposite value.\n" +
"- The logical statement can be a number. The logic statement will be considered true for every number except 0 (this means that NOT will return true for only 0).\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the logic statement is not a valid logical statement.");    
    } else {           
            
         if (a.equals("OR")){
        FUNC_TextPane.setText("- Is able to read all the logical statements / values in an array, down to one cell. When at least one of these values is ‘true’, OR will return true.\n" +
"- The logical statements can be a number. The logic statement will be considered true for every number except 0.\n" +
"- Throws an Exception:\n" +
"1.      When the logic statement is not a valid logical statement.");    
    } else {           
            
         if (a.equals("POWER")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the base value, second input value is the power value.\n" +
"- Is able to raise a cell / value to the power of another cell / value.\n" +
"- Negative values for both base and power are supported.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 2 Object. Or rather, when there are more than 2 cells/values selected.\n" +
"2.      When one of the cells/values is not a number.");    
    } else {           
            
         if (a.equals("PRODUCT")){
        FUNC_TextPane.setText("- Is able to multiply an array of numbers with one another, down to one cell / value.\n" +
"- Skips String inputs. This means that trying to use POWER on an array with strings will result in a 0.\n" +
"- Throws an Exception: never.");    
    } else {           
            
           if (a.equals("PROPER")){
        FUNC_TextPane.setText("- Is able to transform a cell / String input into that same String entirely into proper writing. This means that every letter will be lowercase except for the first letter of each word, which will be uppercase.\n" +
"- Skips Numerical inputs. This means that trying to use PROPER on a number will results in simply returning that number.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 2 Object. Or rather, when there are more than 2 cells/values selected.");    
    } else {             
            
            if (a.equals("ROUNDDOWN")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the value you want to round down, second value is the amount of decimal places.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 2 Objects. Or rather, when there are more than 2 cells/values selected.\n" +
"2.      When one of the cells/values is not a number.");    
    } else {            
     
                
              if (a.equals("PRODUCT")){
        FUNC_TextPane.setText("- Is able to multiply an array of numbers with one another, down to one cell / value.\n" +
"- Skips String inputs. This means that trying to use POWER on an array with strings will result in a 0.\n" +
"- Throws an Exception: never.");    
    } else {              
                
                
            if (a.equals("ROUNDUP")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the value you want to round up, second value is the amount of decimal places.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 2 Objects. Or rather, when there are more than 2 cells/values selected.\n" +
"2.      When one of the cells/values is not a number.");    
    } else {                
   
            if (a.equals("SIGN")){
        FUNC_TextPane.setText("123123123");    
    } else {               
                
                
            if (a.equals("SQRT")){
        FUNC_TextPane.setText("- Is able to determine the square root of a cell / value.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the cell/value is not a number.\n" +
"3.      When the cell/value is negative.");    
    } else {                
                
                
           if (a.equals("SUM")){
        FUNC_TextPane.setText("- Is able to sum all values in an array, down to one cell.\n" +
"- Skips String inputs. This means that trying to use SUM on an array with strings will result in a 0.\n" +
"- Throws an Exception: never.");    
    } else {   
               
                
     if (a.equals("SUMIF")){
        FUNC_TextPane.setText("- INPUT ORDER: First input value is the criteria, all following values are in the array in which you will sum.\n" +
"- Is able to sum all values in an array that meet a certain criteria.\n" +
"- This criteria can be a string, number or a comparison in the form of (for example) “>500”.\n" +
"- The characters ‘>’, ‘<’, ‘>=’ and ‘<=’ are supported.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains less than 2 Objects. Or rather, when there have not been selected enough values / cells.\n" +
"2.      When the criteria is a string.");    
    } else {                  
                      
                
         FUNC_TextPane.setText("- Is able to determine whether a cell/value is positive, negative or zero.\n" +
"- Throws an Exception:\n" +
"1.      When the ArrayList contains more than 1 Object. Or rather, when there are more than 1 cells/values selected.\n" +
"2.      When the cell/value is not a number.");
     }
        
           }
            }
            }
            }
              }
            }
           }
         }
         }
         }
         }
         }
        }
     }
     }
     }
     }
    }
    }
     }
     }
     }
     }
    }
    }
    

    }//GEN-LAST:event_FUNC_LISTValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FunctionHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FunctionHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FunctionHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FunctionHelp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FunctionHelp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList FUNC_LIST;
    private javax.swing.JTextPane FUNC_TextPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
